// <auto-generated />
using System;
using Ds.Full.MySql.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ds.Full.MySql.Migrations
{
    [DbContext(typeof(DsFullDatabaseContext))]
    [Migration("20240923234759_InitialCatalog")]
    partial class InitialCatalog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Ds.Full.MySql.Entities.Finances.PaymentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<long>("CustomerId")
                        .HasColumnType("BIGINT");

                    b.Property<decimal?>("OtherFee")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<decimal?>("OverdueFee")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("RentalFee")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<long>("RentalId")
                        .HasColumnType("BIGINT");

                    b.Property<decimal?>("RewindFee")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.HasKey("Id")
                        .HasName("PkPaymentId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Payment", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Inventories.InventoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AcquisitionDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal>("AcquisitionValue")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<DateTime?>("SellingDate")
                        .HasColumnType("DATETIME");

                    b.Property<decimal?>("SellingValue")
                        .HasColumnType("DECIMAL(18,2)");

                    b.Property<sbyte>("Status")
                        .HasColumnType("TINYINT");

                    b.Property<long>("SupplierId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("TitleId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.HasKey("Id")
                        .HasName("PkInventoryId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TitleId");

                    b.ToTable("Inventory", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Medias.CategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<sbyte>("Rating")
                        .HasColumnType("TINYINT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.HasKey("Id")
                        .HasName("PkCategoryId");

                    b.ToTable("Category", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Medias.TitleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuthorId")
                        .HasColumnType("BIGINT");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INT");

                    b.Property<sbyte>("ContentType")
                        .HasColumnType("TINYINT");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<sbyte>("MediaType")
                        .HasColumnType("TINYINT");

                    b.Property<long?>("ProducerId")
                        .HasColumnType("BIGINT");

                    b.Property<sbyte?>("Rating")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.HasKey("Id")
                        .HasName("PkTitleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProducerId");

                    b.ToTable("Title", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonAddressEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("VARCHAR(128)");

                    b.Property<short>("AddressType")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("PersonId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id")
                        .HasName("PkPersonAddressId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddress", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonContactEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("VARCHAR(128)");

                    b.Property<short>("ContactType")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("PersonId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id")
                        .HasName("PkPersonContactId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContact", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(256)");

                    b.Property<int>("PersonType")
                        .HasColumnType("INT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.Property<int?>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PkPersonId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Person", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Rentals.RentalEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<long>("CustomerId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime?>("DeadlineDate")
                        .HasColumnType("DATETIME");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("DATETIME");

                    b.Property<sbyte>("Status")
                        .HasColumnType("TINYINT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PkRentalId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Rental", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Rentals.RentalItemEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("InventoryId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("RentalId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id")
                        .HasName("PkRentalItemId");

                    b.HasIndex("InventoryId");

                    b.HasIndex("RentalId");

                    b.ToTable("RentalItem", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Staffs.ProfileEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(128)");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.HasKey("Id")
                        .HasName("PkProfileId");

                    b.ToTable("Profile", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Staffs.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(2);

                    b.Property<ulong>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<long?>("PersonId")
                        .HasColumnType("BIGINT");

                    b.Property<int>("ProfileId")
                        .HasColumnType("INT");

                    b.Property<DateTimeOffset>("UpdateDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnOrder(3);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(64)");

                    b.HasKey("Id")
                        .HasName("PkUserId");

                    b.HasIndex("ProfileId");

                    b.ToTable("User", null, t =>
                        {
                            t.HasComment("");
                        });
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Finances.PaymentEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Customer")
                        .WithMany("PaymentCustomerList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Person_TO_Payment_ON_CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Inventories.InventoryEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Supplier")
                        .WithMany("InventorySupplierList")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Person_TO_Inventory_ON_SupplierId");

                    b.HasOne("Ds.Full.MySql.Entities.Medias.TitleEntity", "Title")
                        .WithMany("InventoryList")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Title_TO_Inventory_ON_TitleId");

                    b.Navigation("Supplier");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Medias.TitleEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Author")
                        .WithMany("TitleAuthorList")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Person_TO_Title_ON_AuthorId");

                    b.HasOne("Ds.Full.MySql.Entities.Medias.CategoryEntity", "Category")
                        .WithMany("TitleList")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Category_TO_Title_ON_CategoryId");

                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Producer")
                        .WithMany("TitleProducerList")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("FK_Person_TO_Title_ON_ProducerId");

                    b.Navigation("Author");

                    b.Navigation("Category");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonAddressEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Person")
                        .WithMany("PersonAddressList")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Person_TO_PersonAddress_ON_PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonContactEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Person")
                        .WithMany("PersonContactList")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Person_TO_PersonContact_ON_PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Staffs.UserEntity", "User")
                        .WithOne("Person")
                        .HasForeignKey("Ds.Full.MySql.Entities.Persons.PersonEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Person_TO_User_ON_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Rentals.RentalEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Persons.PersonEntity", "Customer")
                        .WithMany("RentalCustomerList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ds.Full.MySql.Entities.Finances.PaymentEntity", "Payment")
                        .WithOne("Rental")
                        .HasForeignKey("Ds.Full.MySql.Entities.Rentals.RentalEntity", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Rental_TO_Payment_ON_PaymentId");

                    b.HasOne("Ds.Full.MySql.Entities.Staffs.UserEntity", "User")
                        .WithMany("RentalList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_User_TO_Rental_ON_UserId");

                    b.Navigation("Customer");

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Rentals.RentalItemEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Inventories.InventoryEntity", "Inventory")
                        .WithMany("RentalItemList")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DK_Inventory_TO_RentalItem_ON_InventoryId");

                    b.HasOne("Ds.Full.MySql.Entities.Rentals.RentalEntity", "Rental")
                        .WithMany("RentalItemList")
                        .HasForeignKey("RentalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Rental_TO_RentalItem_ON_RentalId");

                    b.Navigation("Inventory");

                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Staffs.UserEntity", b =>
                {
                    b.HasOne("Ds.Full.MySql.Entities.Staffs.ProfileEntity", "Profile")
                        .WithMany("UserList")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Profile_TO_User_ON_ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Finances.PaymentEntity", b =>
                {
                    b.Navigation("Rental");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Inventories.InventoryEntity", b =>
                {
                    b.Navigation("RentalItemList");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Medias.CategoryEntity", b =>
                {
                    b.Navigation("TitleList");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Medias.TitleEntity", b =>
                {
                    b.Navigation("InventoryList");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Persons.PersonEntity", b =>
                {
                    b.Navigation("InventorySupplierList");

                    b.Navigation("PaymentCustomerList");

                    b.Navigation("PersonAddressList");

                    b.Navigation("PersonContactList");

                    b.Navigation("RentalCustomerList");

                    b.Navigation("TitleAuthorList");

                    b.Navigation("TitleProducerList");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Rentals.RentalEntity", b =>
                {
                    b.Navigation("RentalItemList");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Staffs.ProfileEntity", b =>
                {
                    b.Navigation("UserList");
                });

            modelBuilder.Entity("Ds.Full.MySql.Entities.Staffs.UserEntity", b =>
                {
                    b.Navigation("Person");

                    b.Navigation("RentalList");
                });
#pragma warning restore 612, 618
        }
    }
}
